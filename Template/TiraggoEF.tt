<#@ template language="C#" debug="true" hostspecific="true"#>
<#@ include file="EF.Utility.CS.ttinclude"#>
<#@ assembly name="TiraggoEdmx" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Xml.Serialization" #>
<#@ import namespace="TiraggoEdmx" #>
//========================================================
// Tiraggo.EF Copyright © Mike Griffin 2013
//========================================================
<#
    //===============================================================
    //  NOTE: "TiraggoEdmx.dll" must be registered in the GAC
    //===============================================================
    string path = System.IO.Path.GetDirectoryName(Host.TemplateFile);

    string inputFile = @"My2ndGeneration.edmx";
    string inputPath = path + "\\" + @"My2ndGeneration.edmx";

    Edmx edmx = Edmx.Load(inputPath);

    MetadataLoader loader = new MetadataLoader(this);
    var	fileManager = EntityFrameworkTemplateFileManager.Create(this);
    var code = new CodeGenerationTools(this);
    EdmItemCollection itemCollection = loader.CreateEdmItemCollection(inputFile);

    // Now that I have all the data at my fingertips I can create the DynamicQuery class
    // for each entity
    foreach (EntityType entity in itemCollection.GetItems<EntityType>().OrderBy(e => e.Name))
    {
        TiraggoEntityInfo info = new TiraggoEntityInfo(edmx, entity.FullName);

        fileManager.StartNewFile(entity.Name + "Query.cs");
#>
using System;
using System.Diagnostics;
using Tiraggo.DynamicQuery;

<#
        BeginNamespace(code);
        var className = entity.Name + "Query";
#>
    [DebuggerDisplay("Query = {Parse()}")]
    [Serializable]
    public class <#=className#> : tgDynamicQuerySerializable
    {
        public <#=className#>()
        {
            metadata = Metadata.Create();
        }

        public <#=className#>(string alias)
            : base(alias)
        {
            metadata = Metadata.Create();
        }

        #region tgQueryItems

<#
        foreach(EdmProperty prop in entity.Properties)      
        {
#>
        public tgQueryItem <#=prop.Name#>
        {
            get { return new tgQueryItem(this, Metadata.ColumnNames.<#=prop.Name#>, tgSystemType.<#=info.ColumnCLRMetadata[prop.Name].Type#>); }
        }

<#
        }
#>
        #endregion

        public class Metadata : tgMetadata
        {
            private Metadata() { }

            static public Metadata Create()
            {
                Metadata meta = new Metadata();

                return meta;
            }

            #region ColumnNames
            public class ColumnNames
            {
<#
        foreach(EdmProperty prop in entity.Properties)      
        {
#>
                public const string <#=prop.Name#> = "<#=prop.Name#>";
<#
        }
#>
            }
            #endregion
        }
    }
<#
        EndNamespace(code);
    }
    fileManager.Process();
#>
<#+
public void BeginNamespace(CodeGenerationTools code)
{
    var codeNamespace = code.VsNamespaceSuggestion();
    if (!String.IsNullOrEmpty(codeNamespace))
    {
#>
namespace <#=code.EscapeNamespace(codeNamespace) + ".Query"#>
{
<#+
    }
}

public void EndNamespace(CodeGenerationTools code)
{
    if (!String.IsNullOrEmpty(code.VsNamespaceSuggestion()))
    {
#>
}
<#+
    }
}
#>